paths:
  /api/tasks:
    post:
      summary: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createTask'
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: 'Invalid task data'
        401:
          description: 'User not authenticated'
        404:
          description: 'Responsible user not found'
        500:
          description: 'Internal server error'
    get:
      summary: Get all public tasks and tasks associated to user (responsible or created by)
      tags:
        - Tasks
      responses:
        200:
          description: List of tasks obtained successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          description: 'User not authenticated'
        500:
          description: 'Internal server error'

  /api/tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          description: Task's identifier
          schema: 
            type: string
      responses:
        200:
          description: Task obtained successfully
          content:
           application/json:
             schema:
              $ref: '#/components/schemas/Task'
        401:
          description: 'User not authenticated'
        404: 
          description: 'Task not found'
        500:
          description: 'Internal server error'
    put:
      summary: Update a task
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          description: Task's identifier
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/requestBodies/updateTask'
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: 'Invalid task data'
        401:
          description: 'User not authenticated'
        404:
          description: 'Task or responsible user not found'
        500:
          description: 'Internal server error'
    delete:
      summary: Delete a task
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          description: Task's identifier
          schema: 
            type: string
      responses:
        204:
          description: Task deleted successfully
        401:
          description: 'User not authenticated'
        404:
          description: 'Task not found'
        500:
          description: 'Internal server error'

  /api/tasks/{id}/comment:
    post:
      summary: Add a comment to a task
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          description: Task's identifier
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createComment'
      responses:
        200:
          description: Comment added successfully
          content:
            application/json:
             schema:
              $ref: '#/components/schemas/Task'
        400:
          description: 'Invalid comment data'
        401:
          description: 'User not authenticated'
        404:
          description: 'Task not found'
        500: 
          description: 'Internal server error'

  /api/tasks/{id}/comment/{cid}:
    delete:
      summary: Delete a comment from a task
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          description: Task's identifier
          schema: 
            type: string
        - in: path
          name: cid
          required: true
          description: Comment's identifier
          schema: 
            type: string
      responses:
        200:
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        401:
          description: 'User not authenticated'
        404:
          description: 'Task or comment not found'
        500:
          description: 'Internal server error'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task's identifier
        title:
          type: string
          description: Task's title
        description:
          type: string
          description: Task's description
        status:
          type: string
          description: Task's status
        dueDate:
          type: string
          description: Limit date to complete task
        responsibleId:
          type: integer
          description: Task's responsible user identifier
        file:
          type: string
          nullable: true
          description: Path to file attached to task
        isPublic:
          type: boolean
          description: Indicates if the task is public or private
        createdBy:
          type: integer
          description: Task's creator user identifier
        createdAt:
          type: string
          description: Task's creation date
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      example:
        id: 1
        title: 'Task 1'
        description: 'Description of task 1'
        status: 'Pending'
        dueDate: '2024-05-01'
        responsibleId: 1
        file: null
        isPublic: true
        createdBy: 1
        createdAt: '2024-05-01'
        comments: []

    Comment:
      type: object
      properties:
        id:
          type: integer
          description: Comment's identifier
        content:
          type: string
          description: Comment's text
        createdBy:
          type: integer
          description: Comment's creator user identifier
        createdAt:
          type: string
          description: Comment's creation date
      example:
        id: 1
        content: 'This is a comment'
        createdBy: 1
        createdAt: '2020-01-01T00:00:00.000Z'

  requestBodies:
    createTask:
      type: object
      properties:
        title:
          type: string
          description: Task's title
        description:
          type: string
          description: Task's description
        status:
          type: string
          description: Task's status
        dueDate:
          type: string
          description: Limit date to complete task
        responsibleId:
          type: integer
          description: Task's responsible user identifier
        isPublic:
          type: boolean
          description: Indicates if the task is public or private
      example:
        title: 'Task 1'
        description: 'Description of task 1'
        status: 'Pending'
        dueDate: '2024-05-01'
        responsibleId: 1
        isPublic: true
    updateTask:
      type: object
      properties:
        title:
          type: string
          description: Task's title
          nullable: true
        description:
          type: string
          description: Task's description
          nullable: true
        status: 
          type: string
          description: Task's status
          nullable: true
        dueDate:
          type: string
          description: Limit date to complete task
          nullable: true
        responsibleId:
          type: integer
          description: Task's responsible user identifier
          nullable: true
        isPublic:
          type: boolean
          description: Indicates if the task is public or private
          nullable: true
      example:
        title: 'Task 1 - Update'
        description: 'Description of task 1 (updated)'
        status: 'Completed'
    createComment:
      type: object
      properties:
        content:
          type: string
          description: Comment's text
      example:
        content: 'This is a comment'